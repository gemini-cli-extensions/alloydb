# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Package and Upload Release Assets

on:
  release:
    types: [created]
  push:
    branches:
      - 'release-package'

jobs:
  package:
    name: Package for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          # - { os: "linux", arch: "amd64" }
          # - { os: "darwin", arch: "arm64" }
          - { os: "darwin", arch: "amd64" }
          - { os: "windows", arch: "amd64" }
    steps:
      - name: Checkout code at the new tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Get version from tag
        shell: bash
        run: |
          TAG_NAME=${{ github.event.release.tag_name }}
          echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV

      - name: Create release archive
        shell: bash
        run: |
          OS="${{ matrix.platform.os }}"
          ARCH="${{ matrix.platform.arch }}"
          VERSION="${{ env.VERSION }}"
          
          # 1. Define source and target filenames
          SOURCE_BIN_SUFFIX=""
          TARGET_BIN_SUFFIX=""
          ARCHIVE_NAME="cli-extension-${OS}-${ARCH}.tar.gz" # Default to .tar.gz
          
          if [ "$OS" == "windows" ]; then
            TARGET_BIN_SUFFIX=".exe"
            ARCHIVE_NAME="cli-extension-${OS}-${ARCH}.zip" # Use .zip for Windows
            # SOURCE_BIN_SUFFIX=".exe" # Uncomment if your source binary has .exe
          fi

          # This is the full name of the binary in your repo (from your Step 1)
          SOURCE_BINARY="toolbox-v${VERSION}-${OS}-${ARCH}${SOURCE_BIN_SUFFIX}"
          
          # This is the new name for the binary *inside* the archive (from your Step 4)
          TARGET_BINARY="toolbox${TARGET_BIN_SUFFIX}"
          
          # 2. Check that the pre-built binary exists
          if [ ! -f "$SOURCE_BINARY" ]; then
            echo "Error: Binary '${SOURCE_BINARY}' not found!"
            exit 1
          fi

          # 3. Create a staging directory to ensure a clean archive root
          mkdir staging
          
          # 4. Copy and rename all files into the staging directory (from your Step 4)
          cp "${SOURCE_BINARY}" "staging/${TARGET_BINARY}"
          cp gemini-extension.json ALLOYDB.md staging/
          
          # 5. Create the final archive (as requested in your Step 4)
          if [ "$OS" == "windows" ]; then
            (cd staging && zip ../${ARCHIVE_NAME} *)
          else
            tar -czvf "${ARCHIVE_NAME}" -C staging .
          fi
          
          echo "Created archive: ${ARCHIVE_NAME}"
          
      - name: Upload archive as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-archives
          path: ${{ env.ARCHIVE_NAME }}

  upload:
    name: Upload all assets to release
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: write # Required to upload assets to the release
    steps:
      - name: Download all archives from workflow artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-archives
          path: release-archives # Download to a local dir

      - name: Upload all assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload \
            ${{ github.event.release.tag_name }} \
            release-archives/*