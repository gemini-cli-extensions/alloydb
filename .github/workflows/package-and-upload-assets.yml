# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Package and Upload Release Assets

env:
  PACKAGE_NAME: "alloydb-gemini-cli-extension"
on:
  release:
    types: [created]

jobs:
  package:
    name: Package for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          # - { os: "linux", arch: "amd64" }
          # - { os: "darwin", arch: "arm64" }
          - { os: "darwin", arch: "amd64" }
          - { os: "windows", arch: "amd64" }
    steps:
      - name: Checkout code at the new tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "VERSION_NUMBER=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Create release archive
        id: create_archive
        shell: bash
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION_NUMBER }}
          OS_NAME: ${{ matrix.platform.os }}
          ARCH_NAME: ${{ matrix.platform.arch }}
        run: |
          echo "Packaging for v${VERSION} on ${OS_NAME}-${ARCH_NAME}"
          ARCHIVE_EXTENSION="tar.gz"
          
          SOURCE_BIN_SUFFIX=""
          TARGET_BIN_SUFFIX=""
          
          if [ "$OS_NAME" == "windows" ]; then
            ARCHIVE_EXTENSION="zip"
            SOURCE_BIN_SUFFIX=".exe"
            TARGET_BIN_SUFFIX=".exe"
          fi
          ARCHIVE_NAME="${PACKAGE_NAME}-${OS_NAME}-${ARCH_NAME}.${ARCHIVE_EXTENSION}"

          SOURCE_BINARY=$(ls toolbox-v*-${OS_NAME}-${ARCH_NAME}${SOURCE_BIN_SUFFIX} | head -n 1)

          # Check if the command found any file at all
          if [ -z "$SOURCE_BINARY" ]; then
            echo "Error: Could not find any source binary matching the pattern!"
            ls -l
            exit 1
          fi
          echo "Found source binary via pattern matching: ${SOURCE_BINARY}"

          TARGET_BINARY="toolbox${TARGET_BIN_SUFFIX}"

          mkdir staging
          cp "${SOURCE_BINARY}" "staging/${TARGET_BINARY}"
          cp gemini-extension.json ALLOYDB.md LICENSE staging/

          if [ "$OS_NAME" == "windows" ]; then
            (cd staging && zip ../${ARCHIVE_NAME} *)
          else
            tar -czvf "${ARCHIVE_NAME}" -C staging .
          fi
          
          echo "Created archive: ${ARCHIVE_NAME}"
          
          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload archive as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: toolbox-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: ${{ steps.create_archive.outputs.ARCHIVE_PATH }}

  upload:
    name: Upload all assets to release
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all archives from workflow artifact
        uses: actions/download-artifact@v4
        with:
          path: release-archives

      - name: Upload all assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload \
            ${{ github.event.release.tag_name }} \
            release-archives/*/*