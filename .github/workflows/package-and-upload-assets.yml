# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Package and Upload Release Assets

# Global variables
env:
  PACKAGE_NAME: "alloydb"
  FILES_TO_PACKAGE: "gemini-extension.json ALLOYDB.md LICENSE"
  GCS_BUCKET_URL: "https://storage.googleapis.com/genai-toolbox"

on:
  release:
    types: [created]

jobs:
  package:
    name: Package for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - { os: "linux",   arch: "x64", binary_suffix: "",    archive_extension: "tar.gz" }
          - { os: "darwin",  arch: "arm64", binary_suffix: "",    archive_extension: "tar.gz" }
          - { os: "darwin",  arch: "x64", binary_suffix: "",    archive_extension: "tar.gz" }
          - { os: "windows", arch: "x64", binary_suffix: ".exe",  archive_extension: "zip"    }
    steps:
      - name: Checkout code at the new tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Get Toolbox Version
        id: get_toolbox_version
        run: |
          TOOLBOX_VERSION=$(cat toolbox_version.txt)
          echo "Found toolbox version: ${TOOLBOX_VERSION}"
          echo "TOOLBOX_VERSION=${TOOLBOX_VERSION}" >> $GITHUB_OUTPUT

      - name: Download Source Binary
        env:
          TOOLBOX_VERSION: ${{ steps.get_toolbox_version.outputs.TOOLBOX_VERSION }}
          OS_NAME: ${{ matrix.platform.os }}
          ARCH_NAME: ${{ matrix.platform.arch }}
          BINARY_SUFFIX: ${{ matrix.platform.binary_suffix }}
        run: |
          BINARY_NAME="toolbox${BINARY_SUFFIX}"
          DOWNLOAD_ARCH_NAME="${ARCH_NAME}"
          if [[ "${ARCH_NAME}" == "x64" ]]; then
            echo "Mapping architecture 'x64' to 'amd64' for GCS download."
            DOWNLOAD_ARCH_NAME="amd64"
          fi
          DOWNLOAD_URL="${GCS_BUCKET_URL}/v${TOOLBOX_VERSION}/${OS_NAME}/${DOWNLOAD_ARCH_NAME}/${BINARY_NAME}"
          
          echo "Downloading binary from: ${DOWNLOAD_URL}"
          curl -L --fail -o "${BINARY_NAME}" "${DOWNLOAD_URL}"
          
          echo "Binary downloaded and prepared."
          ls -l

      - name: Create release archive
        id: create_archive
        run: |
          ARCHIVE_NAME="${{ matrix.platform.os }}.${{ matrix.platform.arch }}.${PACKAGE_NAME}.${{ matrix.platform.archive_extension }}"
          SOURCE_BINARY="toolbox${{ matrix.platform.binary_suffix }}"
          TARGET_BINARY="toolbox${{ matrix.platform.binary_suffix }}"

          echo "Packaging ${SOURCE_BINARY} into ${ARCHIVE_NAME}"

          mkdir staging
          cp "${SOURCE_BINARY}" "staging/${TARGET_BINARY}"
          cp ${FILES_TO_PACKAGE} staging/

          if [[ "${{ matrix.platform.os }}" == "windows" ]]; then
            echo "Modifying gemini-extension.json for Windows..."
            jq '(.mcpServers[].command) |= sub("toolbox$"; "toolbox.exe")' gemini-extension.json > staging/gemini-extension.json
            echo "Modification complete."

            (cd staging && zip ../${ARCHIVE_NAME} *)
          else
            tar -czvf "${ARCHIVE_NAME}" -C staging .
          fi
          
          echo "Created archive: ${ARCHIVE_NAME}"
          
          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload archive as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.os }}.${{ matrix.platform.arch }}.${PACKAGE_NAME}.${{ matrix.platform.archive_extension }}
          path: ${{ steps.create_archive.outputs.ARCHIVE_PATH }}

  upload:
    name: Upload all assets to release
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all archives from workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-archives

      - name: List downloaded files
        run: |
          echo "--- Downloaded files ---"
          ls -R release-archives
          echo "------------------------"

      - name: Upload all assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload \
            ${{ github.event.release.tag_name }} \
            release-archives/*/*
